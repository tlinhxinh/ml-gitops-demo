apiVersion: apps/v1
kind: Deployment
metadata:
  name: text-preprocessor
  annotations:
    argocd.argoproj.io/sync-wave: "2"  # Deploy after Redis
spec:
  replicas: 2
  selector:
    matchLabels:
      app: text-preprocessor
  template:
    metadata:
      labels:
        app: text-preprocessor
    spec:
      containers:
      - name: preprocessor
        # ARM64-native Python image
        image: python:3.11-slim-bookworm
        command:
        - /bin/bash
        - -c
        - |
          pip install redis flask nltk spacy && \
          python -m spacy download en_core_web_sm && \
          python -c "
          from flask import Flask, request, jsonify
          import redis
          import re
          import os
          
          app = Flask(__name__)
          redis_client = redis.Redis(host=os.getenv('REDIS_HOST', 'localhost'), port=6379, decode_responses=True)
          
          def preprocess_text(text):
              # Basic text preprocessing
              text = re.sub(r'http\S+', '', text)  # Remove URLs
              text = re.sub(r'@\w+', '', text)     # Remove mentions
              text = re.sub(r'#\w+', '', text)     # Remove hashtags
              text = text.lower().strip()
              return text
          
          @app.route('/health')
          def health(): return {'status': 'healthy'}
          
          @app.route('/preprocess', methods=['POST'])
          def preprocess():
              data = request.json
              clean_text = preprocess_text(data['text'])
              return jsonify({'processed_text': clean_text})
          
          if __name__ == '__main__':
              app.run(host='0.0.0.0', port=8081)
          "
        env:
        - name: REDIS_HOST
          value: "redis-cache-service"
        - name: REDIS_PORT
          value: "6379"
        ports:
        - containerPort: 8081
        resources:
          requests:
            memory: "512Mi"  # Higher for M3 efficiency
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 45
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: text-preprocessor-service
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  selector:
    app: text-preprocessor
  ports:
    - port: 80
      targetPort: 8081